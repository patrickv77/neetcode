/**
 * @param {string[]} tokens
 * @return {number}
 *
 * Constraints:
 * 1 <= tokens.length <= 104
 * tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].
 *
 */
var evalRPN = function (tokens) {
  // we may have to account for tokens being length 1 and not having any value (i.e. an operator as the only token)
  if (tokens.length === 1) return tokens[0];

  const operators = new Set(['+', '-', '*', '/']);
  const tokenStack = [];

  for (let token of tokens) {
    // add integers to the stack
    if (!operators.has(token)) {
      tokenStack.push(token);
    } else {
      // when an operator is encountered, pop from the stack and evaluate using the operator
      // push the result back onto the stack
      // continue until the end of tokens
      let valRight = parseInt(tokenStack.pop());
      let valLeft = parseInt(tokenStack.pop());

      switch (token) {
        case '+':
          tokenStack.push(valLeft + valRight);
          break;
        case '-':
          tokenStack.push(valLeft - valRight);
          break;
        case '*':
          tokenStack.push(valLeft * valRight);
          break;
        case '/':
          tokenStack.push(valLeft / valRight);
          break;
      }
    }
  }

  // return the last value in the stack
  return Math.floor(tokenStack.pop());
};

console.log(
  evalRPN(['10', '6', '9', '3', '+', '-11', '*', '/', '*', '17', '+', '5', '+'])
);
console.log(evalRPN(["4","13","5","/","+"]));

console.log(evalRPN(["-8","23","8","-","9","23","-","-","*","33","-8","/","+","38","-14","-","-","-7","32","-19","-","11","+","+","+","14","22","-","-","27","-9","-","+","31","+","-12","-11","-","-","14","+","30","+","37","30","-","+","-9","+","7","-","37","+","-5","13","/","-","19","-2","-19","12","+","-","23","+","-","-19","-","+","6","+","-17","+","17","+","5","36","+","-10","+","+","23","-8","-","-","18","-","31","-16","-","+","34","+","-6","+","24","-","22","-","-8","-","28","+","-12","+","39","28","-7","+","+","-14","5","+","5","+","10","+","+","+","-18","*","10","+","-5","11","-","6","+","-","-12","31","+","+","30","29","-","-","39","+","13","-8","-5","+","-","26","19","-","*","-","10","-","-20","5","+","+","0","-","28","-","19","/","28","+","-18","-","28","20","+","-5","-19","+","+","-","-12","-","3","-","6","-15","+","4","-","-","38","+","-9","-","38","-","12","-20","-","10","5","-15","-","-","-","+","-11","+","5","+","2","-","28","+","-9","-11","-","+","37","-","-17","31","-","2","+","+","-16","-12","-","-","12","+","34","-","15","+","8","+","17","-","2","-","33","+","-5","+","14","+","29","-","33","23","+","26","30","-","+","+","39","+","9","24","-","-","20","15","+","-","24","+","37","-","30","-1","-","+","34","+","-13","-","23","15","-","-","-5","-8","8","30","35","-9","22","+","-","-","36","-1","+","5","-","-","+","25","-","+","27","-","16","+","+","+","39","-","15","-","-3","+","5","-6","-","+","-6","-15","-7","-","+","/","13","-","18","+","4","+","29","+","-17","0","-6","-20","-17","+","12","-","+","-","+","+","-10","22","+","+","-11","-","-2","38","-","-","-6","+","0","-","-10","+","-4","-10","+","-","0","-","31","30","-","37","5","+","+","+","-15","+","38","4","-","-16","-17","+","+","+","38","-","27","-19","/","12","+","/"]));